/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Functions;

import Data.Student;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user-ma
 */
public class StudentsManager extends javax.swing.JFrame implements FuntionsInf {

    private Image imgNew, imgSave, imgUpdate, imgDelete;
    private ArrayList<Student> list = new ArrayList<>();
    private DefaultTableModel model;
    private int index = -1;
    private File selectedFile;
    private Image imgProfile;
    private boolean picChange = false;

    /**
     * Creates new form StudentsManager
     */
    public StudentsManager() {
        try {
            imgNew = ImageIO.read(new File(getClass().getResource("/Icon/New.jpg").getPath())).getScaledInstance(25, 25, Image.SCALE_DEFAULT);
        } catch (Exception ex) {
            Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            imgUpdate = ImageIO.read(new File(getClass().getResource("/Icon/Update.png").getPath())).getScaledInstance(25, 25, Image.SCALE_DEFAULT);
        } catch (Exception ex) {
            Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            imgSave = ImageIO.read(new File(getClass().getResource("/Icon/Save.png").getPath())).getScaledInstance(25, 25, Image.SCALE_DEFAULT);
        } catch (Exception ex) {
            Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            imgDelete = ImageIO.read(new File(getClass().getResource("/Icon/Delete.png").getPath())).getScaledInstance(25, 25, Image.SCALE_DEFAULT);
        } catch (Exception ex) {
            Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        setLocationRelativeTo(null);
        model = (DefaultTableModel) tblData.getModel();
        readFromDatabase();
        fillToTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrGender = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtMail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        rdoMale = new javax.swing.JRadioButton();
        rdoFemale = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        btnPic = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("QUẢN LÝ SINH VIÊN");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Quản Lý Sinh Viên");

        jLabel2.setText("Mã SV:");

        jLabel3.setText("Họ Tên:");

        jLabel4.setText("Email:");

        jLabel5.setText("Số ĐT:");

        jLabel6.setText("Giới Tính:");

        jLabel7.setText("Địa chỉ:");

        bgrGender.add(rdoMale);
        rdoMale.setSelected(true);
        rdoMale.setText("Nam");

        bgrGender.add(rdoFemale);
        rdoFemale.setText("Nữ");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rdoMale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdoFemale))
                    .addComponent(txtName)
                    .addComponent(txtMail)
                    .addComponent(jScrollPane1)
                    .addComponent(txtPhone)
                    .addComponent(txtCode))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(rdoMale)
                    .addComponent(rdoFemale))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnPic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPicActionPerformed(evt);
            }
        });

        btnNew.setIcon(new ImageIcon(imgNew));
        btnNew.setText("New");
        btnNew.setToolTipText("");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSave.setIcon(new ImageIcon(imgSave)
        );
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new ImageIcon(imgUpdate)
        );
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new ImageIcon(imgDelete));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPic, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                            .addComponent(btnNew, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))))
                .addGap(0, 11, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPic, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã SV", "Họ Tên", "Email", "Số ĐT", "Giới Tính", "Địa chỉ", "Ảnh"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblData);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 126, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        // TODO add your handling code here:
        index = tblData.getSelectedRow();
        picChange = false;
        showDetail();
    }//GEN-LAST:event_tblDataMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        save();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        addNew();
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnPicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPicActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Select A File:");
        jfc.setFileFilter(new FileNameExtensionFilter("Image (png, jpg, jepg, gif)", "png", "jpg", "jepg", "gif"));
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            selectedFile = jfc.getSelectedFile();

            try {
                imgProfile = ImageIO.read(selectedFile).getScaledInstance(145, 195, Image.SCALE_DEFAULT);
            } catch (IOException ex) {
                Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
            }
            btnPic.setIcon(new ImageIcon(imgProfile));
            picChange = true;
        }
    }//GEN-LAST:event_btnPicActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(StudentsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(StudentsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(StudentsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(StudentsManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new StudentsManager().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrGender;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnPic;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rdoFemale;
    private javax.swing.JRadioButton rdoMale;
    private javax.swing.JTable tblData;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtMail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables

    @Override
    public void fillToTable() {
        model.setRowCount(0);
        for (Student student : list) {
            model.addRow(new Object[]{student.getCode(), student.getName(), student.getEmail(), student.getPhone(), student.getGender(), student.getAddress(), student.getPic()});
        }
        model.fireTableDataChanged();
    }

    @Override
    public void showDetail() {
        if (index != -1) {
            txtName.setText(list.get(index).getName());
            txtCode.setText(list.get(index).getCode());
            txtMail.setText(list.get(index).getEmail());
            txtPhone.setText(list.get(index).getPhone());
            txtAddress.setText(list.get(index).getAddress());
            if (list.get(index).getGender().equals("Nam")) {
                rdoMale.setSelected(true);
            } else {
                rdoFemale.setSelected(true);
            }
            try {
                imgProfile = ImageIO.read(new File(System.getProperty("user.dir") + "/src/Images/" + list.get(index).getPic())).getScaledInstance(145, 195, Image.SCALE_DEFAULT);
                btnPic.setIcon(new ImageIcon(imgProfile));
            } catch (Exception ex) {
                Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    @Override
    public void clearForm() {
        txtName.setText("");
        txtCode.setText("");
        txtMail.setText("");
        txtPhone.setText("");
        txtAddress.setText("");
        rdoMale.setSelected(true);
        btnPic.setIcon(null);
        selectedFile = null;
        index = -1;
    }

    @Override
    public void addNew() {
        clearForm();
        index = -1;
        fillToTable();
    }

    @Override
    public void save() {
        if (checkInput()) {
            if (codeExists() == -1) {
                addToDatabase();
            } else {
                if (JOptionPane.showConfirmDialog(this, "Code Aready exit. click Yes to update or use another code.", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    update();
                }
            }
        }
    }

    @Override
    public void update() {
        if (index != -1) {
            if (checkInput()) {
                if (codeExists() == -1 || codeExists() == index) {
                    updateInDatabase();
                } else {
                    JOptionPane.showMessageDialog(this, "Code Aready exit. Please use another code.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please an Student before Update");
        }
    }

    @Override
    public void delete() {
        if (index != -1) {
            if (JOptionPane.showConfirmDialog(this, "Are you sure? Delete? All data cannot recovery.", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                removeFromDatabase();
                fillToTable();
                clearForm();
            }
        }
    }

    @Override
    public void readFromDatabase() {
        try {
            String url = "jdbc:sqlserver://localhost:1433";//databaseName=QLGVSV";
            Connection con = DriverManager.getConnection(url, "sa", "Mvh123456aA@");
            Statement stm = con.createStatement();
            String sql = "select mssv,hoten,email,sodt,iif(gioitinh=1,N'Nam',N'Nữ')as gioitinh,diachi,hinh\n"
                    + "from QLGVSV.dbo.Students";
            ResultSet rs = stm.executeQuery(sql);
            list.removeAll(list);
            while (rs.next()) {
                list.add(new Student(rs.getNString("mssv"), rs.getNString("hoten"), rs.getNString("email"),
                        rs.getNString("sodt"), rs.getNString("gioitinh"), rs.getNString("diachi"), rs.getNString("hinh")));
            }
            rs.close();
            stm.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    @Override
    public void addToDatabase() {
        try {
            String url = "jdbc:sqlserver://localhost:1433";//databaseName=QLGVSV";
            Connection con = DriverManager.getConnection(url, "sa", "Mvh123456aA@");
            String code = txtCode.getText();
            String name = txtName.getText();
            String mail = txtMail.getText();
            String phone = txtPhone.getText();
            boolean gender;
            if (rdoMale.isSelected()) {
                gender = true;
            } else {
                gender = false;
            }
            String address = txtAddress.getText();
//            imgProfile = ImageIO.read(new File(getClass().getResource("/Images/" + list.get(index).getPic()).getPath())).getScaledInstance(145, 195, Image.SCALE_DEFAULT);
            String pic = selectedFile.getName();
            String sql = "insert into QLGVSV.dbo.students(mssv,hoten,email,sodt,gioitinh,diachi,hinh)\n"
                    + "values(?,?,?,?,?,?,?);";
            PreparedStatement stm = con.prepareStatement(sql);
            stm.setString(1, code);
            stm.setString(2, name);
            stm.setString(3, mail);
            stm.setString(4, phone);
            stm.setBoolean(5, gender);
            stm.setString(6, address);
            stm.setString(7, pic);

            int row = stm.executeUpdate();
            if (row != 1) {
                JOptionPane.showMessageDialog(this, "Something Wrong! Please close application and try again.");
                stm.close();
                con.close();
                return;
            } else {
                copyFile();
            }
            String gen;
            if (rdoMale.isSelected()) {
                gen = "Male";
            } else {
                gen = "Female";
            }
            list.add(new Student(code, name, mail, phone, gen, address, pic));
            fillToTable();
            index = list.size() - 1;
            stm.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    @Override
    public void updateInDatabase() {
        if (index != -1) {
            try {
                String url = "jdbc:sqlserver://localhost:1433";//databaseName=QLGVSV";
                String code = txtCode.getText();
                String name = txtName.getText();
                String mail = txtMail.getText();
                String phone = txtPhone.getText();
                boolean gender;
                if (rdoMale.isSelected()) {
                    gender = true;
                } else {
                    gender = false;
                }
                String gen;
                if (rdoMale.isSelected()) {
                    gen = "Male";
                } else {
                    gen = "Female";
                }
                String pic = selectedFile.getName();

                Student s = list.get(index);
                String address = txtAddress.getText();
                if (s.getCode().equals(code) == false) {
                    if (updateCol(url, "mssv", code, s.getCode()) == false) {
                        return;
                    }
                }
                if (s.getName().equals(name) == false) {
                    if (updateCol(url, "hoten", name, code) == false) {
                        return;
                    }
                }
                if (s.getEmail().equals(mail) == false) {
                    if (updateCol(url, "email", mail, code) == false) {
                        return;
                    }
                }
                if (s.getAddress().equals(address) == false) {
                    if (updateCol(url, "diachi", address, code) == false) {
                        return;
                    }
                }
                if (s.getGender().equals(gen) == false) {
                    if (updateCol(url, "gioitinh", gen, code) == false) {
                        return;
                    }
                }
                if (s.getPhone().equals(phone) == false) {
                    if (updateCol(url, "sodt", phone, code) == false) {
                        return;
                    }
                }
                if (picChange) {
                    deleteFile(s.getPic());
                    copyFile();
                }
                list.set(index, new Student(code, name, mail, phone, gen, address, pic));
                fillToTable();
                index = list.size() - 1;
//                stm.close();
//                con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
            }
        }
    }

    @Override
    public void removeFromDatabase() {
        try {
            String url = "jdbc:sqlserver://localhost:1433";//databaseName=QLGVSV";
            Connection con = DriverManager.getConnection(url, "sa", "Mvh123456aA@");
            String sql = "delete from QLGVSV.dbo.grade\n"
                    + "where mssv=?";
            PreparedStatement stm = con.prepareStatement(sql);
            stm.setString(1, list.get(index).getCode());

            int row = stm.executeUpdate();
            sql = "delete from QLGVSV.dbo.students\n"
                    + "where mssv=?";
            stm = con.prepareStatement(sql);
            stm.setString(1, list.get(index).getCode());
            row += stm.executeUpdate();
            deleteFile(list.get(index).getPic());
            stm.close();
            con.close();
            list.remove(index);
            index = -1;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    @Override
    public void find() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int codeExists() {
        for (Student student : list) {
            if (txtCode.getText().equals(student.getCode())) {
                return list.indexOf(student);
            }
        }
        return -1;
    }

    @Override
    public boolean checkInput() {
        if (txtCode.getText().equals("") || txtName.getText().equals("") || txtMail.getText().equals("") || txtPhone.getText().equals("") || txtAddress.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Must input all field");
            return false;
        }
        if (Pattern.compile("[a-z]([a-z0-9]+[\\._]?)+[a-z0-9]+@[a-z]{2,}(\\.[a-z]+){1,2}").matcher(txtMail.getText()).matches() == false) {
            JOptionPane.showMessageDialog(this, "Wrong Mail Format");
            return false;
        }
        if (Pattern.compile("0[0-9]{9,}").matcher(txtPhone.getText()).matches() == false) {
            JOptionPane.showMessageDialog(this, "Wrong Phone");
            return false;
        }
        if (selectedFile == null) {
            JOptionPane.showMessageDialog(this, "Must Have Profile Picture");
            return false;
        }

        return true;
    }

    @Override
    public void showSelectedRow() {
        if (index != -1) {
            tblData.setRowSelectionInterval(index, index);
        }
    }

    @Override
    public void copyFile() {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(selectedFile);
            File des = new File(System.getProperty("user.dir") + "/src/Images/" + selectedFile.getName());
            if (des.exists()) {
                des = new File(System.getProperty("user.dir") + "/src/Images/1" + selectedFile.getName());
            }
            os = new FileOutputStream(des);
            byte[] buffer = new byte[1111111111];
            int length;
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                is.close();
                os.close();
            } catch (Exception ex) {
                Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
//        try {
//            String name = "/Images/" + selectedFile.getName();
//            File des = new File(getClass().getResource("/Images/" + selectedFile.getName()).getPath());
//            Files.copy(selectedFile.toPath(), des.toPath());
//        } catch (IOException ex) {
//            Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }

    public void deleteFile(String name) {
        File f = new File(System.getProperty("user.dir") + "/src/Images/" + name);
        f.delete();
    }

    public boolean updateCol(String url, String colName, String colVal, String code) {
        try {
            Connection con = DriverManager.getConnection(url, "sa", "Mvh123456aA@");
            String sql = "update QLGVSV.dbo.students\n"
                    + "set " + colName + "=?"
                    + "where mssv=?";
            PreparedStatement stm = con.prepareStatement(sql);
            stm.setString(1, colVal);
            stm.setString(2, code);
            int row = stm.executeUpdate();
            if (row != 1) {
                JOptionPane.showMessageDialog(this, "Something Wrong! Please close application and try again.");
                stm.close();
                con.close();
                return false;
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        return true;
    }

    public boolean updateCol(String url, String colName, boolean colVal, String code) {
        try {
            Connection con = DriverManager.getConnection(url, "sa", "Mvh123456aA@");
            String sql = "update QLGVSV.dbo.students\n"
                    + "set " + colName + "=?"
                    + "where mssv=?";
            PreparedStatement stm = con.prepareStatement(sql);
            stm.setBoolean(1, colVal);
            stm.setString(2, code);
            int row = stm.executeUpdate();
            if (row != 1) {
                JOptionPane.showMessageDialog(this, "Something Wrong! Please close application and try again.");
                stm.close();
                con.close();
                return false;
            }
        } catch (Exception ex) {
            Logger.getLogger(StudentsManager.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        return true;
    }
}
